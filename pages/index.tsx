import type { GetServerSideProps, NextPage } from "next";
import Head from "next/head";
import Image from "next/image";
import React, { useState } from "react";
import {
  GetPokemonByNameDocument,
  GetPokemonByNameQuery,
  GetPokemonByNameQueryVariables,
  Pokemon,
  PokemonEnum,
  usePokemonsQuery,
} from "../components/pokemon-urql";
import { getPokeByName } from "../services/gql";
import styles from "../styles/Home.module.css";
import { Dialog, Transition } from "@headlessui/react";
import MyModal from "../components/PokeDetailModal";

const Home: NextPage<{
  poke?: GetPokemonByNameQuery["getPokemon"];
  defaultName: string;
}> = ({ defaultName = "", poke }) => {
  const [currentPage, setCurrentPage] = useState(0);
  const [name, setName] = useState(defaultName);
  const [r] = usePokemonsQuery({ variables: { name, page: currentPage } });
  const pokes = r.data?.getFuzzyPokemon;
  let [isOpen, setIsOpen] = useState(false);
  let [pokeKey, setPokeKey] = useState<PokemonEnum>();

  return (
    <div className="flex min-h-full items-center justify-center py-12 px-4 sm:px-6 lg:px-8">
      <Head>
        <title>We Do Pokemon</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className="w-full max-w-3xl space-y-8">
        <div>
          <img
            className="mx-auto h-12 w-auto"
            src="/assets/img/wedo-logo-colour.png"
            alt="Your Company"
          />
          <h2 className="mt-6 text-center text-3xl font-bold tracking-tight text-gray-900">
            We Do Pokemon
          </h2>
          <p className="mt-2 text-center text-sm text-gray-600">
            Search your lovely Pokemon and rate it!
          </p>
        </div>

        <div>
          <div>
            <label
              htmlFor="default-search"
              className="mb-2 text-sm font-medium text-gray-900 sr-only dark:text-gray-300"
            >
              Search
            </label>
            <div className="relative">
              <div className="flex absolute inset-y-0 left-0 items-center pl-3 pointer-events-none">
                <svg
                  aria-hidden="true"
                  className="w-5 h-5 text-gray-500 dark:text-gray-400"
                  fill="none"
                  stroke="currentColor"
                  viewBox="0 0 24 24"
                  xmlns="http://www.w3.org/2000/svg"
                >
                  <path
                    strokeLinecap="round"
                    strokeLinejoin="round"
                    strokeWidth={2}
                    d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"
                  />
                </svg>
              </div>
              <input
                onChange={(e) => setName(e.target.value)}
                type="search"
                id="default-search"
                className="block p-4 pl-10 w-full text-sm text-gray-900 bg-gray-50 rounded-lg border border-gray-300 focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500"
                placeholder="Pikachu"
                required
                value={name}
              />
            </div>
          </div>
        </div>

        {/* search result */}
        <div className="gap-8 columns-1 sm:columns-2 md:columns-3">
          {pokes?.map((i) => {
            return (
              <div
                key={i.key}
                className="max-w-sm rounded overflow-hidden shadow-lg"
                role="button"
                onClick={() => {
                  setIsOpen((p) => !p);
                  setPokeKey(i.key);
                }}
              >
                <img className="w-full" src={i.sprite} alt={i.key} />
                <div className="px-6 py-4">
                  <div className="font-bold text-xl mb-2">{i.key}</div>
                  {i.flavorTexts.map((ii) => {
                    return (
                      <p key={ii.flavor} className="text-gray-700 text-base">
                        {ii.flavor}
                      </p>
                    );
                  })}
                </div>
                <div className="px-6 pt-4 pb-2">
                  <span className="inline-block bg-gray-200 rounded-full px-3 py-1 text-sm font-semibold text-gray-700 mr-2 mb-2">
                    #photography
                  </span>
                  <span className="inline-block bg-gray-200 rounded-full px-3 py-1 text-sm font-semibold text-gray-700 mr-2 mb-2">
                    #travel
                  </span>
                  <span className="inline-block bg-gray-200 rounded-full px-3 py-1 text-sm font-semibold text-gray-700 mr-2 mb-2">
                    #winter
                  </span>
                </div>
              </div>
            );
          })}
        </div>

        <MyModal pokemon={pokeKey} isOpen={isOpen} setIsOpen={setIsOpen} />
      </div>
    </div>
  );
};

export const getServerSideProps: GetServerSideProps = async (context) => {
  let poke: GetPokemonByNameQuery["getPokemon"] | null = null;
  const randomIdx = Math.floor(
    Math.random() * Object.values(PokemonEnum).length
  );
  const name = context?.query.name || Object.values(PokemonEnum)[randomIdx];
  // if (Object.values(PokemonEnum).includes(name as PokemonEnum)) {
  //   const result = await getPokeByName({
  //     pokemon: name as PokemonEnum,
  //   });
  //   if (result) poke = result;
  // }
  // console.log({ name });
  return {
    props: { poke, pokes: [], defaultName: name }, // will be passed to the page component as props
  };
};

export default Home;
